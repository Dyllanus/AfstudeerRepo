AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sample SAM Template for Micronaut Lambda functions with SnapStart enabled

Globals:
  Function:
    Tracing: Active
    CodeUri: target/micronaut-lambda-function-1.0.0-SNAPSHOT.jar
    Runtime: java21
    Timeout: 30
    MemorySize: 512
    AutoPublishAlias: live
    SnapStart:
      ApplyOn: PublishedVersions
    Environment:
      Variables:
        PRODUCT_TABLE_NAME: !Ref ProductsTable

Metadata:
  AWS::ServerlessRepo::Application:
    Name: Micronaut snapstart
    Description: Micronaut project voor het testen van de snelheid van Lambda's met snapstart
    Author: Dyllan
    SpdxLicenseId: Apache-2.0
    Labels: ['tests']
    SemanticVersion: 1.0.0

Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      TracingEnabled: true
      StageName: prod
      Name: Lambda Micronaut API (snapstart)

  GetProductByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      VersionDescription: Version 2
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/LabRole
      Handler: nl.dyllan.handler.GetProductByIdHandler::execute
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ProductsTable
      Events:
        GetRequestById:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /products/{id}
            Method: get
      Environment:
        Variables:
          LAMBDA_FUNCTION: GetProductById

  GetProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      VersionDescription: Version 2
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/LabRole
      Handler: nl.dyllan.handler.GetAllProductsHandler::execute
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ProductsTable
      Events:
        GetRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /products
            Method: get
      Environment:
        Variables:
          LAMBDA_FUNCTION: GetAllProducts

  PutProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      VersionDescription: Version 2
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/LabRole
      Handler: nl.dyllan.handler.CreateProductHandler::execute
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductsTable
      Events:
        PutRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /products/{id}
            Method: put
      Environment:
        Variables:
          LAMBDA_FUNCTION: CreateProduct

  DeleteProductFunction:
    VersionDescription: Version 2
    Type: AWS::Serverless::Function
    Properties:
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/LabRole
      Handler: nl.dyllan.handler.DeleteProductHandler::execute
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductsTable
      Events:
        PutRequest:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /products/{id}
            Method: delete
      Environment:
        Variables:
          LAMBDA_FUNCTION: DeleteProduct

  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'PK'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'PK'
          KeyType: 'HASH'
      BillingMode: PAY_PER_REQUEST

Outputs:
  MicronautApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for Micronaut sample function"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/prod/products"
